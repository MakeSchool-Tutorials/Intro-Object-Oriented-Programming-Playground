/*:
 ![Make School Banner](./swift_banner.png)
 # 好きな食べ物

 素晴らしい！ ifステートメントを使ってもう1つ関数を作成しましょう。`Tiger`の好物を記録する変数も使用します。変数は`favoriteFood`という名前で、下のスターターコードに既に用意されています。

 - important: `favoriteFood`変数は、関数や波括弧を持つ別のステートメントの中ではなく、プログラムの一番外側のスコープにあるため、「グローバル」変数と呼びます。変数が関数内で定義されていた場合は、「関数のスコープ内」にあると言います。ifステートメント内で宣言された場合は、「ifステートメントのスコープ内」となります。さらに、クラス内だった場合は「クラスのスコープ内」となります。最後のものについては後で取り上げます。

    変数はそのスコープ内のコードでのみ使用でき、スコープが終了すると削除 (割り当てを解除) されます。例えば、関数内で変数を宣言すると、関数から出た時点で削除されます。変数をグローバル スコープで宣言すると、永久に存在します。

 - callout(課題): `eat`という名前で`name`と`food`の2つの引数を持つ関数を作成してください。この関数は呼び出されるたびに`<name>は<food>を食べます`と出力します。

    それだけではありません!`eat`関数は引数のfoodがグローバル変数`favoriteFood`と同じ値かどうかをチェックします。値が同じである場合は`うまい！！！ <name>はもっと<food>を欲しがっています`と出力します。_値が同じではない場合は、eat関数は問題1で作成したsleep関数を呼び出し(前のページからコピーできます)、`name`の値を引数としてsleepに渡します。_

 次の関数の呼び出し:

     eat(name: "Tigger", food: "肉")
     eat(name: "Tigger", food: "餌")

 これは、次を出力します。

    Tiggerは肉を食べます
    うまい！！！ Tiggerはもっと肉を欲しがっています
    Tiggerは餌を食べます
    Tiggerは8時間眠ります

 */

let favoriteFood = "肉"

func sleep(name: String) {

}

func eat(name: String, food: String) {

}

eat(name: "Tigger", food: "肉")
eat(name: "Tigger", food: "餌")

//: [前へ](@previous) | [次へ](@next)
